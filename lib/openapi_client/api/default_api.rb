=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.0
Contact: david@spoonacular.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'uri'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add to Meal Plan
    # Add an item to the user's meal plan.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param inline_object9 [InlineObject9] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def add_to_meal_plan(username, hash, inline_object9, opts = {})
      data, _status_code, _headers = add_to_meal_plan_with_http_info(username, hash, inline_object9, opts)
      data
    end

    # Add to Meal Plan
    # Add an item to the user&#39;s meal plan.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param inline_object9 [InlineObject9] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def add_to_meal_plan_with_http_info(username, hash, inline_object9, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_to_meal_plan ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.add_to_meal_plan"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.add_to_meal_plan"
      end
      # verify the required parameter 'inline_object9' is set
      if @api_client.config.client_side_validation && inline_object9.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object9' when calling DefaultApi.add_to_meal_plan"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/items'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([''])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object9) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_to_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add to Shopping List
    # Add an item to the current shopping list of a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param inline_object12 [InlineObject12] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def add_to_shopping_list(username, hash, inline_object12, opts = {})
      data, _status_code, _headers = add_to_shopping_list_with_http_info(username, hash, inline_object12, opts)
      data
    end

    # Add to Shopping List
    # Add an item to the current shopping list of a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param inline_object12 [InlineObject12] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def add_to_shopping_list_with_http_info(username, hash, inline_object12, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_to_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.add_to_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.add_to_shopping_list"
      end
      # verify the required parameter 'inline_object12' is set
      if @api_client.config.client_side_validation && inline_object12.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object12' when calling DefaultApi.add_to_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/items'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([''])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object12) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_to_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Analyze a Recipe Search Query
    # Parse a recipe search query to find out its intention.
    # @param q [String] The recipe search query.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def analyze_a_recipe_search_query(q, opts = {})
      data, _status_code, _headers = analyze_a_recipe_search_query_with_http_info(q, opts)
      data
    end

    # Analyze a Recipe Search Query
    # Parse a recipe search query to find out its intention.
    # @param q [String] The recipe search query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def analyze_a_recipe_search_query_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.analyze_a_recipe_search_query ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling DefaultApi.analyze_a_recipe_search_query"
      end
      # resource path
      local_var_path = '/recipes/queries/analyze'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#analyze_a_recipe_search_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Analyze Recipe Instructions
    # Extract ingredients and equipment from the recipe's instructions.
    # @param instructions [String] The instructions to be analyzed.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def analyze_recipe_instructions(instructions, opts = {})
      data, _status_code, _headers = analyze_recipe_instructions_with_http_info(instructions, opts)
      data
    end

    # Analyze Recipe Instructions
    # Extract ingredients and equipment from the recipe&#39;s instructions.
    # @param instructions [String] The instructions to be analyzed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def analyze_recipe_instructions_with_http_info(instructions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.analyze_recipe_instructions ...'
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling DefaultApi.analyze_recipe_instructions"
      end
      # resource path
      local_var_path = '/recipes/analyzeInstructions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['instructions'] = instructions

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#analyze_recipe_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autocomplete Ingredient Search
    # Autocomplete the entry of an ingredient.
    # @param query [String] The partial or full ingredient name.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @option opts [Boolean] :meta_information Whether to return more meta information about the ingredients.
    # @option opts [Boolean] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @return [Object]
    def autocomplete_ingredient_search(query, opts = {})
      data, _status_code, _headers = autocomplete_ingredient_search_with_http_info(query, opts)
      data
    end

    # Autocomplete Ingredient Search
    # Autocomplete the entry of an ingredient.
    # @param query [String] The partial or full ingredient name.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @option opts [Boolean] :meta_information Whether to return more meta information about the ingredients.
    # @option opts [Boolean] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def autocomplete_ingredient_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.autocomplete_ingredient_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.autocomplete_ingredient_search"
      end
      # resource path
      local_var_path = '/food/ingredients/autocomplete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'metaInformation'] = opts[:'meta_information'] if !opts[:'meta_information'].nil?
      query_params[:'intolerances'] = opts[:'intolerances'] if !opts[:'intolerances'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#autocomplete_ingredient_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autocomplete Menu Item Search
    # Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Object]
    def autocomplete_menu_item_search(query, opts = {})
      data, _status_code, _headers = autocomplete_menu_item_search_with_http_info(query, opts)
      data
    end

    # Autocomplete Menu Item Search
    # Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def autocomplete_menu_item_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.autocomplete_menu_item_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.autocomplete_menu_item_search"
      end
      # resource path
      local_var_path = '/food/menuItems/suggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#autocomplete_menu_item_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autocomplete Product Search
    # Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Object]
    def autocomplete_product_search(query, opts = {})
      data, _status_code, _headers = autocomplete_product_search_with_http_info(query, opts)
      data
    end

    # Autocomplete Product Search
    # Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    # @param query [String] The (partial) search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def autocomplete_product_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.autocomplete_product_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.autocomplete_product_search"
      end
      # resource path
      local_var_path = '/food/products/suggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#autocomplete_product_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autocomplete Recipe Search
    # Autocomplete a partial input to suggest possible recipe names.
    # @param query [String] The query to be autocompleted.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Object]
    def autocomplete_recipe_search(query, opts = {})
      data, _status_code, _headers = autocomplete_recipe_search_with_http_info(query, opts)
      data
    end

    # Autocomplete Recipe Search
    # Autocomplete a partial input to suggest possible recipe names.
    # @param query [String] The query to be autocompleted.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of results to return (between 1 and 25).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def autocomplete_recipe_search_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.autocomplete_recipe_search ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.autocomplete_recipe_search"
      end
      # resource path
      local_var_path = '/recipes/autocomplete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#autocomplete_recipe_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Cuisine
    # Classify the recipe's cuisine.
    # @param title [String] The title of the recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def classify_cuisine(title, ingredient_list, opts = {})
      data, _status_code, _headers = classify_cuisine_with_http_info(title, ingredient_list, opts)
      data
    end

    # Classify Cuisine
    # Classify the recipe&#39;s cuisine.
    # @param title [String] The title of the recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def classify_cuisine_with_http_info(title, ingredient_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classify_cuisine ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.classify_cuisine"
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.classify_cuisine"
      end
      # resource path
      local_var_path = '/recipes/cuisine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['title'] = title
      form_params['ingredientList'] = ingredient_list

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify_cuisine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Grocery Product
    # This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    # @param inline_object8 [InlineObject8] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Object]
    def classify_grocery_product(inline_object8, opts = {})
      data, _status_code, _headers = classify_grocery_product_with_http_info(inline_object8, opts)
      data
    end

    # Classify Grocery Product
    # This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    # @param inline_object8 [InlineObject8] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def classify_grocery_product_with_http_info(inline_object8, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classify_grocery_product ...'
      end
      # verify the required parameter 'inline_object8' is set
      if @api_client.config.client_side_validation && inline_object8.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object8' when calling DefaultApi.classify_grocery_product"
      end
      # resource path
      local_var_path = '/food/products/classify'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object8) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify_grocery_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Grocery Product Bulk
    # Provide a set of product jsons, get back classified products.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Object]
    def classify_grocery_product_bulk(body, opts = {})
      data, _status_code, _headers = classify_grocery_product_bulk_with_http_info(body, opts)
      data
    end

    # Classify Grocery Product Bulk
    # Provide a set of product jsons, get back classified products.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def classify_grocery_product_bulk_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.classify_grocery_product_bulk ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classify_grocery_product_bulk"
      end
      # resource path
      local_var_path = '/food/products/classifyBatch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify_grocery_product_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Amounts
    # Convert amounts like \"2 cups of flour to grams\".
    # @param ingredient_name [String] The ingredient which you want to convert.
    # @param source_amount [Float] The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
    # @param source_unit [String] The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param target_unit [String] The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def convert_amounts(ingredient_name, source_amount, source_unit, target_unit, opts = {})
      data, _status_code, _headers = convert_amounts_with_http_info(ingredient_name, source_amount, source_unit, target_unit, opts)
      data
    end

    # Convert Amounts
    # Convert amounts like \&quot;2 cups of flour to grams\&quot;.
    # @param ingredient_name [String] The ingredient which you want to convert.
    # @param source_amount [Float] The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
    # @param source_unit [String] The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param target_unit [String] The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def convert_amounts_with_http_info(ingredient_name, source_amount, source_unit, target_unit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.convert_amounts ...'
      end
      # verify the required parameter 'ingredient_name' is set
      if @api_client.config.client_side_validation && ingredient_name.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_name' when calling DefaultApi.convert_amounts"
      end
      # verify the required parameter 'source_amount' is set
      if @api_client.config.client_side_validation && source_amount.nil?
        fail ArgumentError, "Missing the required parameter 'source_amount' when calling DefaultApi.convert_amounts"
      end
      # verify the required parameter 'source_unit' is set
      if @api_client.config.client_side_validation && source_unit.nil?
        fail ArgumentError, "Missing the required parameter 'source_unit' when calling DefaultApi.convert_amounts"
      end
      # verify the required parameter 'target_unit' is set
      if @api_client.config.client_side_validation && target_unit.nil?
        fail ArgumentError, "Missing the required parameter 'target_unit' when calling DefaultApi.convert_amounts"
      end
      # resource path
      local_var_path = '/recipes/convert'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingredientName'] = ingredient_name
      query_params[:'sourceAmount'] = source_amount
      query_params[:'sourceUnit'] = source_unit
      query_params[:'targetUnit'] = target_unit

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#convert_amounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Recipe Card
    # Generate a recipe card for a recipe.
    # @param title [String] The title of the recipe.
    # @param image [File] The binary image of the recipe as jpg.
    # @param ingredients [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param instructions [String] The instructions to make the recipe. One step per line (separate lines with \\\\n).
    # @param ready_in_minutes [Float] The number of minutes it takes to get the recipe on the table.
    # @param servings [Float] The number of servings the recipe makes.
    # @param mask [String] The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
    # @param background_image [String] The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author The author of the recipe.
    # @option opts [String] :background_color The background color for the recipe card as a hex-string.
    # @option opts [String] :font_color The font color for the recipe card as a hex-string.
    # @option opts [String] :source The source of the recipe.
    # @return [Object]
    def create_recipe_card(title, image, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts = {})
      data, _status_code, _headers = create_recipe_card_with_http_info(title, image, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts)
      data
    end

    # Create Recipe Card
    # Generate a recipe card for a recipe.
    # @param title [String] The title of the recipe.
    # @param image [File] The binary image of the recipe as jpg.
    # @param ingredients [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param instructions [String] The instructions to make the recipe. One step per line (separate lines with \\\\n).
    # @param ready_in_minutes [Float] The number of minutes it takes to get the recipe on the table.
    # @param servings [Float] The number of servings the recipe makes.
    # @param mask [String] The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
    # @param background_image [String] The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :author The author of the recipe.
    # @option opts [String] :background_color The background color for the recipe card as a hex-string.
    # @option opts [String] :font_color The font color for the recipe card as a hex-string.
    # @option opts [String] :source The source of the recipe.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_recipe_card_with_http_info(title, image, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_recipe_card ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'ingredients' is set
      if @api_client.config.client_side_validation && ingredients.nil?
        fail ArgumentError, "Missing the required parameter 'ingredients' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'ready_in_minutes' is set
      if @api_client.config.client_side_validation && ready_in_minutes.nil?
        fail ArgumentError, "Missing the required parameter 'ready_in_minutes' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'mask' is set
      if @api_client.config.client_side_validation && mask.nil?
        fail ArgumentError, "Missing the required parameter 'mask' when calling DefaultApi.create_recipe_card"
      end
      # verify the required parameter 'background_image' is set
      if @api_client.config.client_side_validation && background_image.nil?
        fail ArgumentError, "Missing the required parameter 'background_image' when calling DefaultApi.create_recipe_card"
      end
      # resource path
      local_var_path = '/recipes/visualizeRecipe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['title'] = title
      form_params['image'] = image
      form_params['ingredients'] = ingredients
      form_params['instructions'] = instructions
      form_params['readyInMinutes'] = ready_in_minutes
      form_params['servings'] = servings
      form_params['mask'] = mask
      form_params['backgroundImage'] = background_image
      form_params['author'] = opts[:'author'] if !opts[:'author'].nil?
      form_params['backgroundColor'] = opts[:'background_color'] if !opts[:'background_color'].nil?
      form_params['fontColor'] = opts[:'font_color'] if !opts[:'font_color'].nil?
      form_params['source'] = opts[:'source'] if !opts[:'source'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_recipe_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete from Meal Plan
    # Delete an item from the user's meal plan.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param inline_object10 [InlineObject10] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_from_meal_plan(username, id, hash, inline_object10, opts = {})
      data, _status_code, _headers = delete_from_meal_plan_with_http_info(username, id, hash, inline_object10, opts)
      data
    end

    # Delete from Meal Plan
    # Delete an item from the user&#39;s meal plan.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param inline_object10 [InlineObject10] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_from_meal_plan_with_http_info(username, id, hash, inline_object10, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_from_meal_plan ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.delete_from_meal_plan"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_from_meal_plan"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.delete_from_meal_plan"
      end
      # verify the required parameter 'inline_object10' is set
      if @api_client.config.client_side_validation && inline_object10.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object10' when calling DefaultApi.delete_from_meal_plan"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/items/{id}'.sub('{' + 'username' + '}', username.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([''])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object10) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_from_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete from Shopping List
    # Delete an item from the current shopping list of the user.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param inline_object13 [InlineObject13] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_from_shopping_list(username, id, hash, inline_object13, opts = {})
      data, _status_code, _headers = delete_from_shopping_list_with_http_info(username, id, hash, inline_object13, opts)
      data
    end

    # Delete from Shopping List
    # Delete an item from the current shopping list of the user.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param inline_object13 [InlineObject13] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_from_shopping_list_with_http_info(username, id, hash, inline_object13, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_from_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.delete_from_shopping_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_from_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.delete_from_shopping_list"
      end
      # verify the required parameter 'inline_object13' is set
      if @api_client.config.client_side_validation && inline_object13.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object13' when calling DefaultApi.delete_from_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/items/{id}'.sub('{' + 'username' + '}', username.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([''])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object13) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_from_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Food in Text
    # Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
    # @param text [String] The text in which food items, such as dish names and ingredients, should be detected in.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def detect_food_in_text(text, opts = {})
      data, _status_code, _headers = detect_food_in_text_with_http_info(text, opts)
      data
    end

    # Detect Food in Text
    # Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
    # @param text [String] The text in which food items, such as dish names and ingredients, should be detected in.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def detect_food_in_text_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.detect_food_in_text ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.detect_food_in_text"
      end
      # resource path
      local_var_path = '/food/detect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['text'] = text

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#detect_food_in_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Recipe from Website
    # This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    # @param url [String] The URL of the recipe page.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
    # @option opts [Boolean] :analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
    # @return [Object]
    def extract_recipe_from_website(url, opts = {})
      data, _status_code, _headers = extract_recipe_from_website_with_http_info(url, opts)
      data
    end

    # Extract Recipe from Website
    # This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    # @param url [String] The URL of the recipe page.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
    # @option opts [Boolean] :analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def extract_recipe_from_website_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.extract_recipe_from_website ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling DefaultApi.extract_recipe_from_website"
      end
      # resource path
      local_var_path = '/recipes/extract'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'forceExtraction'] = opts[:'force_extraction'] if !opts[:'force_extraction'].nil?
      query_params[:'analyze'] = opts[:'analyze'] if !opts[:'analyze'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#extract_recipe_from_website\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Meal Plan
    # Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
    # @option opts [Float] :target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    # @option opts [String] :diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    # @option opts [String] :exclude A comma-separated list of allergens or ingredients that must be excluded.
    # @return [Object]
    def generate_meal_plan(opts = {})
      data, _status_code, _headers = generate_meal_plan_with_http_info(opts)
      data
    end

    # Generate Meal Plan
    # Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
    # @option opts [Float] :target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    # @option opts [String] :diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    # @option opts [String] :exclude A comma-separated list of allergens or ingredients that must be excluded.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def generate_meal_plan_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_meal_plan ...'
      end
      # resource path
      local_var_path = '/mealplanner/generate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'timeFrame'] = opts[:'time_frame'] if !opts[:'time_frame'].nil?
      query_params[:'targetCalories'] = opts[:'target_calories'] if !opts[:'target_calories'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Shopping List
    # Generate the shopping list for a user from the meal planner in a given time frame.
    # @param username [String] The username.
    # @param start_date [String] The start date in the format yyyy-mm-dd.
    # @param end_date [String] The end date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param inline_object11 [InlineObject11] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def generate_shopping_list(username, start_date, end_date, hash, inline_object11, opts = {})
      data, _status_code, _headers = generate_shopping_list_with_http_info(username, start_date, end_date, hash, inline_object11, opts)
      data
    end

    # Generate Shopping List
    # Generate the shopping list for a user from the meal planner in a given time frame.
    # @param username [String] The username.
    # @param start_date [String] The start date in the format yyyy-mm-dd.
    # @param end_date [String] The end date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param inline_object11 [InlineObject11] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def generate_shopping_list_with_http_info(username, start_date, end_date, hash, inline_object11, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.generate_shopping_list"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling DefaultApi.generate_shopping_list"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling DefaultApi.generate_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.generate_shopping_list"
      end
      # verify the required parameter 'inline_object11' is set
      if @api_client.config.client_side_validation && inline_object11.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object11' when calling DefaultApi.generate_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/{start-date}/{end-date}'.sub('{' + 'username' + '}', username.to_s).sub('{' + 'start-date' + '}', start_date.to_s).sub('{' + 'end-date' + '}', end_date.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([''])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object11) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Random Food Joke
    # Get a random joke that is related to food. Caution: this is an endpoint for adults!
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_a_random_food_joke(opts = {})
      data, _status_code, _headers = get_a_random_food_joke_with_http_info(opts)
      data
    end

    # Get a Random Food Joke
    # Get a random joke that is related to food. Caution: this is an endpoint for adults!
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_a_random_food_joke_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_a_random_food_joke ...'
      end
      # resource path
      local_var_path = '/food/jokes/random'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_a_random_food_joke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Analyzed Recipe Instructions
    # Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
    # @return [Object]
    def get_analyzed_recipe_instructions(id, opts = {})
      data, _status_code, _headers = get_analyzed_recipe_instructions_with_http_info(id, opts)
      data
    end

    # Get Analyzed Recipe Instructions
    # Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_analyzed_recipe_instructions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_analyzed_recipe_instructions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_analyzed_recipe_instructions"
      end
      # resource path
      local_var_path = '/recipes/{id}/analyzedInstructions'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'stepBreakdown'] = opts[:'step_breakdown'] if !opts[:'step_breakdown'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_analyzed_recipe_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Comparable Products
    # Find comparable products to the given one.
    # @param upc [Float] The UPC of the product for which you want to find comparable products.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_comparable_products(upc, opts = {})
      data, _status_code, _headers = get_comparable_products_with_http_info(upc, opts)
      data
    end

    # Get Comparable Products
    # Find comparable products to the given one.
    # @param upc [Float] The UPC of the product for which you want to find comparable products.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_comparable_products_with_http_info(upc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_comparable_products ...'
      end
      # verify the required parameter 'upc' is set
      if @api_client.config.client_side_validation && upc.nil?
        fail ArgumentError, "Missing the required parameter 'upc' when calling DefaultApi.get_comparable_products"
      end
      # resource path
      local_var_path = '/food/products/upc/{upc}/comparable'.sub('{' + 'upc' + '}', upc.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_comparable_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Conversation Suggests
    # This endpoint returns suggestions for things the user can say or ask the chatbot.
    # @param query [String] A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of suggestions to return (between 1 and 25).
    # @return [Object]
    def get_conversation_suggests(query, opts = {})
      data, _status_code, _headers = get_conversation_suggests_with_http_info(query, opts)
      data
    end

    # Get Conversation Suggests
    # This endpoint returns suggestions for things the user can say or ask the chatbot.
    # @param query [String] A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of suggestions to return (between 1 and 25).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_conversation_suggests_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_conversation_suggests ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.get_conversation_suggests"
      end
      # resource path
      local_var_path = '/food/converse/suggest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_conversation_suggests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Dish Pairing for Wine
    # Find a dish that goes well with a given wine.
    # @param wine [String] The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_dish_pairing_for_wine(wine, opts = {})
      data, _status_code, _headers = get_dish_pairing_for_wine_with_http_info(wine, opts)
      data
    end

    # Get Dish Pairing for Wine
    # Find a dish that goes well with a given wine.
    # @param wine [String] The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_dish_pairing_for_wine_with_http_info(wine, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_dish_pairing_for_wine ...'
      end
      # verify the required parameter 'wine' is set
      if @api_client.config.client_side_validation && wine.nil?
        fail ArgumentError, "Missing the required parameter 'wine' when calling DefaultApi.get_dish_pairing_for_wine"
      end
      # resource path
      local_var_path = '/food/wine/dishes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'wine'] = wine

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_dish_pairing_for_wine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Ingredient Information
    # Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
    # @param id [Float] The ingredient id.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :amount The amount of this ingredient.
    # @option opts [String] :unit The unit for the given amount.
    # @return [Object]
    def get_ingredient_information(id, opts = {})
      data, _status_code, _headers = get_ingredient_information_with_http_info(id, opts)
      data
    end

    # Get Ingredient Information
    # Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
    # @param id [Float] The ingredient id.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :amount The amount of this ingredient.
    # @option opts [String] :unit The unit for the given amount.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_ingredient_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_ingredient_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_ingredient_information"
      end
      # resource path
      local_var_path = '/food/ingredients/{id}/information'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amount'] = opts[:'amount'] if !opts[:'amount'].nil?
      query_params[:'unit'] = opts[:'unit'] if !opts[:'unit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_ingredient_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Ingredient Substitutes
    # Search for substitutes for a given ingredient.
    # @param ingredient_name [String] The name of the ingredient you want to replace.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_ingredient_substitutes(ingredient_name, opts = {})
      data, _status_code, _headers = get_ingredient_substitutes_with_http_info(ingredient_name, opts)
      data
    end

    # Get Ingredient Substitutes
    # Search for substitutes for a given ingredient.
    # @param ingredient_name [String] The name of the ingredient you want to replace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_ingredient_substitutes_with_http_info(ingredient_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_ingredient_substitutes ...'
      end
      # verify the required parameter 'ingredient_name' is set
      if @api_client.config.client_side_validation && ingredient_name.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_name' when calling DefaultApi.get_ingredient_substitutes"
      end
      # resource path
      local_var_path = '/food/ingredients/substitutes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingredientName'] = ingredient_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_ingredient_substitutes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Ingredient Substitutes by ID
    # Search for substitutes for a given ingredient.
    # @param id [Float] The id of the ingredient you want substitutes for.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_ingredient_substitutes_by_id(id, opts = {})
      data, _status_code, _headers = get_ingredient_substitutes_by_id_with_http_info(id, opts)
      data
    end

    # Get Ingredient Substitutes by ID
    # Search for substitutes for a given ingredient.
    # @param id [Float] The id of the ingredient you want substitutes for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_ingredient_substitutes_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_ingredient_substitutes_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_ingredient_substitutes_by_id"
      end
      # resource path
      local_var_path = '/food/ingredients/{id}/substitutes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_ingredient_substitutes_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Template
    # Get information about a meal plan template.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_meal_plan_template(username, id, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_template_with_http_info(username, id, hash, opts)
      data
    end

    # Get Meal Plan Template
    # Get information about a meal plan template.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_meal_plan_template_with_http_info(username, id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_meal_plan_template ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.get_meal_plan_template"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_meal_plan_template"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.get_meal_plan_template"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates/{id}'.sub('{' + 'username' + '}', username.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_meal_plan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Templates
    # Get meal plan templates from user or public ones.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_meal_plan_templates(username, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_templates_with_http_info(username, hash, opts)
      data
    end

    # Get Meal Plan Templates
    # Get meal plan templates from user or public ones.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_meal_plan_templates_with_http_info(username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_meal_plan_templates ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.get_meal_plan_templates"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.get_meal_plan_templates"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_meal_plan_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Week
    # Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
    # @param username [String] The username.
    # @param start_date [String] The start date of the meal planned week in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_meal_plan_week(username, start_date, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_week_with_http_info(username, start_date, hash, opts)
      data
    end

    # Get Meal Plan Week
    # Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
    # @param username [String] The username.
    # @param start_date [String] The start date of the meal planned week in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_meal_plan_week_with_http_info(username, start_date, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_meal_plan_week ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.get_meal_plan_week"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling DefaultApi.get_meal_plan_week"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.get_meal_plan_week"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/week/{start-date}'.sub('{' + 'username' + '}', username.to_s).sub('{' + 'start-date' + '}', start_date.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_meal_plan_week\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Menu Item Information
    # Use a menu item id to get all available information about a menu item, such as nutrition.
    # @param id [Float] The menu item id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_menu_item_information(id, opts = {})
      data, _status_code, _headers = get_menu_item_information_with_http_info(id, opts)
      data
    end

    # Get Menu Item Information
    # Use a menu item id to get all available information about a menu item, such as nutrition.
    # @param id [Float] The menu item id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_menu_item_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_menu_item_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_menu_item_information"
      end
      # resource path
      local_var_path = '/food/menuItems/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_menu_item_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Product Information
    # Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    # @param id [Float] The id of the packaged food.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_product_information(id, opts = {})
      data, _status_code, _headers = get_product_information_with_http_info(id, opts)
      data
    end

    # Get Product Information
    # Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    # @param id [Float] The id of the packaged food.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_product_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_product_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_product_information"
      end
      # resource path
      local_var_path = '/food/products/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_product_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Random Food Trivia
    # Returns random food trivia.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_random_food_trivia(opts = {})
      data, _status_code, _headers = get_random_food_trivia_with_http_info(opts)
      data
    end

    # Get Random Food Trivia
    # Returns random food trivia.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_random_food_trivia_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_random_food_trivia ...'
      end
      # resource path
      local_var_path = '/food/trivia/random'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_random_food_trivia\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Random Recipes
    # Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
    # @return [Object]
    def get_random_recipes(opts = {})
      data, _status_code, _headers = get_random_recipes_with_http_info(opts)
      data
    end

    # Get Random Recipes
    # Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_random_recipes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_random_recipes ...'
      end
      # resource path
      local_var_path = '/recipes/random'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_random_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Equipment by ID
    # Get a recipe's equipment list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_recipe_equipment_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_equipment_by_id_with_http_info(id, opts)
      data
    end

    # Get Recipe Equipment by ID
    # Get a recipe&#39;s equipment list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_equipment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_equipment_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_recipe_equipment_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/equipmentWidget.json'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_equipment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Information
    # Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    # @param id [Float] The id of the recipe.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    # @return [Object]
    def get_recipe_information(id, opts = {})
      data, _status_code, _headers = get_recipe_information_with_http_info(id, opts)
      data
    end

    # Get Recipe Information
    # Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    # @param id [Float] The id of the recipe.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_recipe_information"
      end
      # resource path
      local_var_path = '/recipes/{id}/information'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Information Bulk
    # Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    # @param ids [String] A comma-separated list of recipe ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    # @return [Object]
    def get_recipe_information_bulk(ids, opts = {})
      data, _status_code, _headers = get_recipe_information_bulk_with_http_info(ids, opts)
      data
    end

    # Get Recipe Information Bulk
    # Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    # @param ids [String] A comma-separated list of recipe ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_information_bulk_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_information_bulk ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling DefaultApi.get_recipe_information_bulk"
      end
      # resource path
      local_var_path = '/recipes/informationBulk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_information_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Ingredients by ID
    # Get a recipe's ingredient list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_recipe_ingredients_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_ingredients_by_id_with_http_info(id, opts)
      data
    end

    # Get Recipe Ingredients by ID
    # Get a recipe&#39;s ingredient list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_ingredients_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_ingredients_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_recipe_ingredients_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/ingredientWidget.json'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_ingredients_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Nutrition Widget by ID
    # Get a recipe's nutrition widget data.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_recipe_nutrition_widget_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_nutrition_widget_by_id_with_http_info(id, opts)
      data
    end

    # Get Recipe Nutrition Widget by ID
    # Get a recipe&#39;s nutrition widget data.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_nutrition_widget_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_nutrition_widget_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_recipe_nutrition_widget_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionWidget.json'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_nutrition_widget_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Price Breakdown by ID
    # Get a recipe's price breakdown data.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_recipe_price_breakdown_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_price_breakdown_by_id_with_http_info(id, opts)
      data
    end

    # Get Recipe Price Breakdown by ID
    # Get a recipe&#39;s price breakdown data.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_recipe_price_breakdown_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_recipe_price_breakdown_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_recipe_price_breakdown_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/priceBreakdownWidget.json'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_recipe_price_breakdown_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Shopping List
    # Get the current shopping list for the given user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_shopping_list(username, hash, opts = {})
      data, _status_code, _headers = get_shopping_list_with_http_info(username, hash, opts)
      data
    end

    # Get Shopping List
    # Get the current shopping list for the given user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_shopping_list_with_http_info(username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.get_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.get_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Similar Recipes
    # Find recipes which are similar to the given one.
    # @param id [Float] The id of the source recipe for which similar recipes should be found.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Object]
    def get_similar_recipes(id, opts = {})
      data, _status_code, _headers = get_similar_recipes_with_http_info(id, opts)
      data
    end

    # Get Similar Recipes
    # Find recipes which are similar to the given one.
    # @param id [Float] The id of the source recipe for which similar recipes should be found.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_similar_recipes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_similar_recipes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_similar_recipes"
      end
      # resource path
      local_var_path = '/recipes/{id}/similar'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_similar_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Wine Description
    # Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
    # @param wine [String] The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_wine_description(wine, opts = {})
      data, _status_code, _headers = get_wine_description_with_http_info(wine, opts)
      data
    end

    # Get Wine Description
    # Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
    # @param wine [String] The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_wine_description_with_http_info(wine, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_wine_description ...'
      end
      # verify the required parameter 'wine' is set
      if @api_client.config.client_side_validation && wine.nil?
        fail ArgumentError, "Missing the required parameter 'wine' when calling DefaultApi.get_wine_description"
      end
      # resource path
      local_var_path = '/food/wine/description'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'wine'] = wine

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_wine_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Wine Pairing
    # Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
    # @param food [String] The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
    # @return [Object]
    def get_wine_pairing(food, opts = {})
      data, _status_code, _headers = get_wine_pairing_with_http_info(food, opts)
      data
    end

    # Get Wine Pairing
    # Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
    # @param food [String] The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_wine_pairing_with_http_info(food, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_wine_pairing ...'
      end
      # verify the required parameter 'food' is set
      if @api_client.config.client_side_validation && food.nil?
        fail ArgumentError, "Missing the required parameter 'food' when calling DefaultApi.get_wine_pairing"
      end
      # resource path
      local_var_path = '/food/wine/pairing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'food'] = food
      query_params[:'maxPrice'] = opts[:'max_price'] if !opts[:'max_price'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_wine_pairing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Wine Recommendation
    # Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
    # @param wine [String] The type of wine to get a specific product recommendation for.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
    # @option opts [Float] :min_rating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
    # @option opts [Float] :number The number of wine recommendations expected (between 1 and 100).
    # @return [Object]
    def get_wine_recommendation(wine, opts = {})
      data, _status_code, _headers = get_wine_recommendation_with_http_info(wine, opts)
      data
    end

    # Get Wine Recommendation
    # Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
    # @param wine [String] The type of wine to get a specific product recommendation for.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
    # @option opts [Float] :min_rating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
    # @option opts [Float] :number The number of wine recommendations expected (between 1 and 100).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_wine_recommendation_with_http_info(wine, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_wine_recommendation ...'
      end
      # verify the required parameter 'wine' is set
      if @api_client.config.client_side_validation && wine.nil?
        fail ArgumentError, "Missing the required parameter 'wine' when calling DefaultApi.get_wine_recommendation"
      end
      # resource path
      local_var_path = '/food/wine/recommendation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'wine'] = wine
      query_params[:'maxPrice'] = opts[:'max_price'] if !opts[:'max_price'].nil?
      query_params[:'minRating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_wine_recommendation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Guess Nutrition by Dish Name
    # Estimate the macronutrients of a dish based on its title.
    # @param title [String] The title of the dish.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def guess_nutrition_by_dish_name(title, opts = {})
      data, _status_code, _headers = guess_nutrition_by_dish_name_with_http_info(title, opts)
      data
    end

    # Guess Nutrition by Dish Name
    # Estimate the macronutrients of a dish based on its title.
    # @param title [String] The title of the dish.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def guess_nutrition_by_dish_name_with_http_info(title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.guess_nutrition_by_dish_name ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling DefaultApi.guess_nutrition_by_dish_name"
      end
      # resource path
      local_var_path = '/recipes/guessNutrition'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#guess_nutrition_by_dish_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Image Analysis by URL
    # Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
    # @param image_url [String] The URL of the image to be analyzed.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def image_analysis_by_url(image_url, opts = {})
      data, _status_code, _headers = image_analysis_by_url_with_http_info(image_url, opts)
      data
    end

    # Image Analysis by URL
    # Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
    # @param image_url [String] The URL of the image to be analyzed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def image_analysis_by_url_with_http_info(image_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.image_analysis_by_url ...'
      end
      # verify the required parameter 'image_url' is set
      if @api_client.config.client_side_validation && image_url.nil?
        fail ArgumentError, "Missing the required parameter 'image_url' when calling DefaultApi.image_analysis_by_url"
      end
      # resource path
      local_var_path = '/food/images/analyze'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'imageUrl'] = image_url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#image_analysis_by_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Image Classification by URL
    # Classify a food image. You can play around with that endpoint!
    # @param image_url [String] The URL of the image to be classified.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def image_classification_by_url(image_url, opts = {})
      data, _status_code, _headers = image_classification_by_url_with_http_info(image_url, opts)
      data
    end

    # Image Classification by URL
    # Classify a food image. You can play around with that endpoint!
    # @param image_url [String] The URL of the image to be classified.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def image_classification_by_url_with_http_info(image_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.image_classification_by_url ...'
      end
      # verify the required parameter 'image_url' is set
      if @api_client.config.client_side_validation && image_url.nil?
        fail ArgumentError, "Missing the required parameter 'image_url' when calling DefaultApi.image_classification_by_url"
      end
      # resource path
      local_var_path = '/food/images/classify'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'imageUrl'] = image_url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#image_classification_by_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map Ingredients to Grocery Products
    # Map a set of ingredients to products you can buy in the grocery store.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def map_ingredients_to_grocery_products(body, opts = {})
      data, _status_code, _headers = map_ingredients_to_grocery_products_with_http_info(body, opts)
      data
    end

    # Map Ingredients to Grocery Products
    # Map a set of ingredients to products you can buy in the grocery store.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def map_ingredients_to_grocery_products_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.map_ingredients_to_grocery_products ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.map_ingredients_to_grocery_products"
      end
      # resource path
      local_var_path = '/food/ingredients/map'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#map_ingredients_to_grocery_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse Ingredients
    # Extract an ingredient from plain text.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings that you can make from the ingredients.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Whether nutrition data should be added to correctly parsed ingredients.
    # @return [Object]
    def parse_ingredients(ingredient_list, servings, opts = {})
      data, _status_code, _headers = parse_ingredients_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Parse Ingredients
    # Extract an ingredient from plain text.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings that you can make from the ingredients.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Whether nutrition data should be added to correctly parsed ingredients.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def parse_ingredients_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.parse_ingredients ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.parse_ingredients"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.parse_ingredients"
      end
      # resource path
      local_var_path = '/recipes/parseIngredients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#parse_ingredients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Quick Answer
    # Answer a nutrition related natural language question.
    # @param q [String] The nutrition related question.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def quick_answer(q, opts = {})
      data, _status_code, _headers = quick_answer_with_http_info(q, opts)
      data
    end

    # Quick Answer
    # Answer a nutrition related natural language question.
    # @param q [String] The nutrition related question.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def quick_answer_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quick_answer ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling DefaultApi.quick_answer"
      end
      # resource path
      local_var_path = '/recipes/quickAnswer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quick_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Custom Foods
    # Search custom foods in a user's account.
    # @param query [String] The search query.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset The number of results to skip (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @return [Object]
    def search_custom_foods(query, username, hash, opts = {})
      data, _status_code, _headers = search_custom_foods_with_http_info(query, username, hash, opts)
      data
    end

    # Search Custom Foods
    # Search custom foods in a user&#39;s account.
    # @param query [String] The search query.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset The number of results to skip (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_custom_foods_with_http_info(query, username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_custom_foods ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_custom_foods"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.search_custom_foods"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling DefaultApi.search_custom_foods"
      end
      # resource path
      local_var_path = '/food/customFoods/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'username'] = username
      query_params[:'hash'] = hash
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_custom_foods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Food Videos
    # Find recipe and other food related videos.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the recipes. See a full list of supported meal types.
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that the recipes should contain.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [Float] :min_length Minimum video length in seconds.
    # @option opts [Float] :max_length Maximum video length in seconds.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @return [Object]
    def search_food_videos(query, opts = {})
      data, _status_code, _headers = search_food_videos_with_http_info(query, opts)
      data
    end

    # Search Food Videos
    # Find recipe and other food related videos.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of the recipes. See a full list of supported meal types.
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that the recipes should contain.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [Float] :min_length Minimum video length in seconds.
    # @option opts [Float] :max_length Maximum video length in seconds.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_food_videos_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_food_videos ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_food_videos"
      end
      # resource path
      local_var_path = '/food/videos/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cuisine'] = opts[:'cuisine'] if !opts[:'cuisine'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'includeIngredients'] = opts[:'include_ingredients'] if !opts[:'include_ingredients'].nil?
      query_params[:'excludeIngredients'] = opts[:'exclude_ingredients'] if !opts[:'exclude_ingredients'].nil?
      query_params[:'minLength'] = opts[:'min_length'] if !opts[:'min_length'].nil?
      query_params[:'maxLength'] = opts[:'max_length'] if !opts[:'max_length'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_food_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Grocery Products
    # Search packaged food products, such as frozen pizza or Greek yogurt.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_calories The minimum amount of calories the product must have.
    # @option opts [Float] :max_calories The maximum amount of calories the product can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the product must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the product can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the product must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the product can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the product must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the product can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @return [Object]
    def search_grocery_products(query, opts = {})
      data, _status_code, _headers = search_grocery_products_with_http_info(query, opts)
      data
    end

    # Search Grocery Products
    # Search packaged food products, such as frozen pizza or Greek yogurt.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_calories The minimum amount of calories the product must have.
    # @option opts [Float] :max_calories The maximum amount of calories the product can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the product must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the product can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the product must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the product can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the product must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the product can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_grocery_products_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_grocery_products ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_grocery_products"
      end
      # resource path
      local_var_path = '/food/products/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_grocery_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Grocery Products by UPC
    # Get information about a packaged food using its UPC.
    # @param upc [Float] The product&#39;s UPC.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def search_grocery_products_by_upc(upc, opts = {})
      data, _status_code, _headers = search_grocery_products_by_upc_with_http_info(upc, opts)
      data
    end

    # Search Grocery Products by UPC
    # Get information about a packaged food using its UPC.
    # @param upc [Float] The product&#39;s UPC.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_grocery_products_by_upc_with_http_info(upc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_grocery_products_by_upc ...'
      end
      # verify the required parameter 'upc' is set
      if @api_client.config.client_side_validation && upc.nil?
        fail ArgumentError, "Missing the required parameter 'upc' when calling DefaultApi.search_grocery_products_by_upc"
      end
      # resource path
      local_var_path = '/food/products/upc/{upc}'.sub('{' + 'upc' + '}', upc.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_grocery_products_by_upc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Menu Items
    # Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_calories The minimum amount of calories the menu item must have.
    # @option opts [Float] :max_calories The maximum amount of calories the menu item can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the menu item must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the menu item can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the menu item must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the menu item can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the menu item must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the menu item can have.
    # @option opts [Float] :offset The offset number for paging (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 10).
    # @return [Object]
    def search_menu_items(query, opts = {})
      data, _status_code, _headers = search_menu_items_with_http_info(query, opts)
      data
    end

    # Search Menu Items
    # Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_calories The minimum amount of calories the menu item must have.
    # @option opts [Float] :max_calories The maximum amount of calories the menu item can have.
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the menu item must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the menu item can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the menu item must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the menu item can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the menu item must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the menu item can have.
    # @option opts [Float] :offset The offset number for paging (between 0 and 990).
    # @option opts [Float] :number The number of expected results (between 1 and 10).
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_menu_items_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_menu_items ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_menu_items"
      end
      # resource path
      local_var_path = '/food/menuItems/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_menu_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes
    # Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \"Search Recipes Complex\" endpoint for much more flexibility.
    # @param query [String] The (natural language) recipe search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. Please note: due to the automatic nature of the recipe analysis, the API cannot be 100% accurate in all cases. Please advise your users to seek professional help with medical issues.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @return [Object]
    def search_recipes(query, opts = {})
      data, _status_code, _headers = search_recipes_with_http_info(query, opts)
      data
    end

    # Search Recipes
    # Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \&quot;Search Recipes Complex\&quot; endpoint for much more flexibility.
    # @param query [String] The (natural language) recipe search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. Please note: due to the automatic nature of the recipe analysis, the API cannot be 100% accurate in all cases. Please advise your users to seek professional help with medical issues.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of results to return (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_recipes_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_recipes ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_recipes"
      end
      # resource path
      local_var_path = '/recipes/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'cuisine'] = opts[:'cuisine'] if !opts[:'cuisine'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'excludeIngredients'] = opts[:'exclude_ingredients'] if !opts[:'exclude_ingredients'].nil?
      query_params[:'intolerances'] = opts[:'intolerances'] if !opts[:'intolerances'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?
      query_params[:'instructionsRequired'] = opts[:'instructions_required'] if !opts[:'instructions_required'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes by Ingredients
    #              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
    # @param ingredients [String] A comma-separated list of ingredients that the recipes should contain.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The maximum number of recipes to return (between 1 and 100). Defaults to 10.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
    # @return [Object]
    def search_recipes_by_ingredients(ingredients, opts = {})
      data, _status_code, _headers = search_recipes_by_ingredients_with_http_info(ingredients, opts)
      data
    end

    # Search Recipes by Ingredients
    #              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
    # @param ingredients [String] A comma-separated list of ingredients that the recipes should contain.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :number The maximum number of recipes to return (between 1 and 100). Defaults to 10.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_recipes_by_ingredients_with_http_info(ingredients, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_recipes_by_ingredients ...'
      end
      # verify the required parameter 'ingredients' is set
      if @api_client.config.client_side_validation && ingredients.nil?
        fail ArgumentError, "Missing the required parameter 'ingredients' when calling DefaultApi.search_recipes_by_ingredients"
      end
      # resource path
      local_var_path = '/recipes/findByIngredients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingredients'] = ingredients
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?
      query_params[:'ranking'] = opts[:'ranking'] if !opts[:'ranking'].nil?
      query_params[:'ignorePantry'] = opts[:'ignore_pantry'] if !opts[:'ignore_pantry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_recipes_by_ingredients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes by Nutrients
    # Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in grams the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in grams the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in grams the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in grams the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in grams the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in grams the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in grams the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in grams the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Object]
    def search_recipes_by_nutrients(opts = {})
      data, _status_code, _headers = search_recipes_by_nutrients_with_http_info(opts)
      data
    end

    # Search Recipes by Nutrients
    # Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in grams the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in grams the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in grams the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in grams the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in grams the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in grams the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in grams the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in grams the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_recipes_by_nutrients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_recipes_by_nutrients ...'
      end
      # resource path
      local_var_path = '/recipes/findByNutrients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'minAlcohol'] = opts[:'min_alcohol'] if !opts[:'min_alcohol'].nil?
      query_params[:'maxAlcohol'] = opts[:'max_alcohol'] if !opts[:'max_alcohol'].nil?
      query_params[:'minCaffeine'] = opts[:'min_caffeine'] if !opts[:'min_caffeine'].nil?
      query_params[:'maxCaffeine'] = opts[:'max_caffeine'] if !opts[:'max_caffeine'].nil?
      query_params[:'minCopper'] = opts[:'min_copper'] if !opts[:'min_copper'].nil?
      query_params[:'maxCopper'] = opts[:'max_copper'] if !opts[:'max_copper'].nil?
      query_params[:'minCalcium'] = opts[:'min_calcium'] if !opts[:'min_calcium'].nil?
      query_params[:'maxCalcium'] = opts[:'max_calcium'] if !opts[:'max_calcium'].nil?
      query_params[:'minCholine'] = opts[:'min_choline'] if !opts[:'min_choline'].nil?
      query_params[:'maxCholine'] = opts[:'max_choline'] if !opts[:'max_choline'].nil?
      query_params[:'minCholesterol'] = opts[:'min_cholesterol'] if !opts[:'min_cholesterol'].nil?
      query_params[:'maxCholesterol'] = opts[:'max_cholesterol'] if !opts[:'max_cholesterol'].nil?
      query_params[:'minFluoride'] = opts[:'min_fluoride'] if !opts[:'min_fluoride'].nil?
      query_params[:'maxFluoride'] = opts[:'max_fluoride'] if !opts[:'max_fluoride'].nil?
      query_params[:'minSaturatedFat'] = opts[:'min_saturated_fat'] if !opts[:'min_saturated_fat'].nil?
      query_params[:'maxSaturatedFat'] = opts[:'max_saturated_fat'] if !opts[:'max_saturated_fat'].nil?
      query_params[:'minVitaminA'] = opts[:'min_vitamin_a'] if !opts[:'min_vitamin_a'].nil?
      query_params[:'maxVitaminA'] = opts[:'max_vitamin_a'] if !opts[:'max_vitamin_a'].nil?
      query_params[:'minVitaminC'] = opts[:'min_vitamin_c'] if !opts[:'min_vitamin_c'].nil?
      query_params[:'maxVitaminC'] = opts[:'max_vitamin_c'] if !opts[:'max_vitamin_c'].nil?
      query_params[:'minVitaminD'] = opts[:'min_vitamin_d'] if !opts[:'min_vitamin_d'].nil?
      query_params[:'maxVitaminD'] = opts[:'max_vitamin_d'] if !opts[:'max_vitamin_d'].nil?
      query_params[:'minVitaminE'] = opts[:'min_vitamin_e'] if !opts[:'min_vitamin_e'].nil?
      query_params[:'maxVitaminE'] = opts[:'max_vitamin_e'] if !opts[:'max_vitamin_e'].nil?
      query_params[:'minVitaminK'] = opts[:'min_vitamin_k'] if !opts[:'min_vitamin_k'].nil?
      query_params[:'maxVitaminK'] = opts[:'max_vitamin_k'] if !opts[:'max_vitamin_k'].nil?
      query_params[:'minVitaminB1'] = opts[:'min_vitamin_b1'] if !opts[:'min_vitamin_b1'].nil?
      query_params[:'maxVitaminB1'] = opts[:'max_vitamin_b1'] if !opts[:'max_vitamin_b1'].nil?
      query_params[:'minVitaminB2'] = opts[:'min_vitamin_b2'] if !opts[:'min_vitamin_b2'].nil?
      query_params[:'maxVitaminB2'] = opts[:'max_vitamin_b2'] if !opts[:'max_vitamin_b2'].nil?
      query_params[:'minVitaminB5'] = opts[:'min_vitamin_b5'] if !opts[:'min_vitamin_b5'].nil?
      query_params[:'maxVitaminB5'] = opts[:'max_vitamin_b5'] if !opts[:'max_vitamin_b5'].nil?
      query_params[:'minVitaminB3'] = opts[:'min_vitamin_b3'] if !opts[:'min_vitamin_b3'].nil?
      query_params[:'maxVitaminB3'] = opts[:'max_vitamin_b3'] if !opts[:'max_vitamin_b3'].nil?
      query_params[:'minVitaminB6'] = opts[:'min_vitamin_b6'] if !opts[:'min_vitamin_b6'].nil?
      query_params[:'maxVitaminB6'] = opts[:'max_vitamin_b6'] if !opts[:'max_vitamin_b6'].nil?
      query_params[:'minVitaminB12'] = opts[:'min_vitamin_b12'] if !opts[:'min_vitamin_b12'].nil?
      query_params[:'maxVitaminB12'] = opts[:'max_vitamin_b12'] if !opts[:'max_vitamin_b12'].nil?
      query_params[:'minFiber'] = opts[:'min_fiber'] if !opts[:'min_fiber'].nil?
      query_params[:'maxFiber'] = opts[:'max_fiber'] if !opts[:'max_fiber'].nil?
      query_params[:'minFolate'] = opts[:'min_folate'] if !opts[:'min_folate'].nil?
      query_params[:'maxFolate'] = opts[:'max_folate'] if !opts[:'max_folate'].nil?
      query_params[:'minFolicAcid'] = opts[:'min_folic_acid'] if !opts[:'min_folic_acid'].nil?
      query_params[:'maxFolicAcid'] = opts[:'max_folic_acid'] if !opts[:'max_folic_acid'].nil?
      query_params[:'minIodine'] = opts[:'min_iodine'] if !opts[:'min_iodine'].nil?
      query_params[:'maxIodine'] = opts[:'max_iodine'] if !opts[:'max_iodine'].nil?
      query_params[:'minIron'] = opts[:'min_iron'] if !opts[:'min_iron'].nil?
      query_params[:'maxIron'] = opts[:'max_iron'] if !opts[:'max_iron'].nil?
      query_params[:'minMagnesium'] = opts[:'min_magnesium'] if !opts[:'min_magnesium'].nil?
      query_params[:'maxMagnesium'] = opts[:'max_magnesium'] if !opts[:'max_magnesium'].nil?
      query_params[:'minManganese'] = opts[:'min_manganese'] if !opts[:'min_manganese'].nil?
      query_params[:'maxManganese'] = opts[:'max_manganese'] if !opts[:'max_manganese'].nil?
      query_params[:'minPhosphorus'] = opts[:'min_phosphorus'] if !opts[:'min_phosphorus'].nil?
      query_params[:'maxPhosphorus'] = opts[:'max_phosphorus'] if !opts[:'max_phosphorus'].nil?
      query_params[:'minPotassium'] = opts[:'min_potassium'] if !opts[:'min_potassium'].nil?
      query_params[:'maxPotassium'] = opts[:'max_potassium'] if !opts[:'max_potassium'].nil?
      query_params[:'minSelenium'] = opts[:'min_selenium'] if !opts[:'min_selenium'].nil?
      query_params[:'maxSelenium'] = opts[:'max_selenium'] if !opts[:'max_selenium'].nil?
      query_params[:'minSodium'] = opts[:'min_sodium'] if !opts[:'min_sodium'].nil?
      query_params[:'maxSodium'] = opts[:'max_sodium'] if !opts[:'max_sodium'].nil?
      query_params[:'minSugar'] = opts[:'min_sugar'] if !opts[:'min_sugar'].nil?
      query_params[:'maxSugar'] = opts[:'max_sugar'] if !opts[:'max_sugar'].nil?
      query_params[:'minZinc'] = opts[:'min_zinc'] if !opts[:'min_zinc'].nil?
      query_params[:'maxZinc'] = opts[:'max_zinc'] if !opts[:'max_zinc'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'random'] = opts[:'random'] if !opts[:'random'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_recipes_by_nutrients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes Complex
    # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    # @param query [String] The (natural language) recipe search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
    # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be used in the recipes.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :type The type of recipe. See a full list of supported meal types.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @option opts [Boolean] :fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query.
    # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned.
    # @option opts [Boolean] :add_recipe_nutrition If set to true, you get nutritional information about each recipes returned.
    # @option opts [String] :author The username of the recipe author.
    # @option opts [String] :tags User defined tags that have to match. The author param has to be set.
    # @option opts [Float] :recipe_box_id The id of the recipe box to which the search should be limited to.
    # @option opts [String] :title_match Enter text that must be found in the title of the recipes.
    # @option opts [Float] :max_ready_time The maximum time in minutes it should take to prepare and cook the recipe.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
    # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
    # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in grams the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in grams the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in grams the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in grams the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in grams the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in grams the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in grams the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in grams the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Object]
    def search_recipes_complex(query, opts = {})
      data, _status_code, _headers = search_recipes_complex_with_http_info(query, opts)
      data
    end

    # Search Recipes Complex
    # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    # @param query [String] The (natural language) recipe search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
    # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be used in the recipes.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :type The type of recipe. See a full list of supported meal types.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @option opts [Boolean] :fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query.
    # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned.
    # @option opts [Boolean] :add_recipe_nutrition If set to true, you get nutritional information about each recipes returned.
    # @option opts [String] :author The username of the recipe author.
    # @option opts [String] :tags User defined tags that have to match. The author param has to be set.
    # @option opts [Float] :recipe_box_id The id of the recipe box to which the search should be limited to.
    # @option opts [String] :title_match Enter text that must be found in the title of the recipes.
    # @option opts [Float] :max_ready_time The maximum time in minutes it should take to prepare and cook the recipe.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
    # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
    # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in grams the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in grams the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in grams the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in grams the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in grams the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in grams the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in grams the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in grams the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Float] :offset The number of results to skip (between 0 and 900).
    # @option opts [Float] :number The number of expected results (between 1 and 100).
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_recipes_complex_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_recipes_complex ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_recipes_complex"
      end
      # resource path
      local_var_path = '/recipes/complexSearch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'cuisine'] = opts[:'cuisine'] if !opts[:'cuisine'].nil?
      query_params[:'excludeCuisine'] = opts[:'exclude_cuisine'] if !opts[:'exclude_cuisine'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'intolerances'] = opts[:'intolerances'] if !opts[:'intolerances'].nil?
      query_params[:'equipment'] = opts[:'equipment'] if !opts[:'equipment'].nil?
      query_params[:'includeIngredients'] = opts[:'include_ingredients'] if !opts[:'include_ingredients'].nil?
      query_params[:'excludeIngredients'] = opts[:'exclude_ingredients'] if !opts[:'exclude_ingredients'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'instructionsRequired'] = opts[:'instructions_required'] if !opts[:'instructions_required'].nil?
      query_params[:'fillIngredients'] = opts[:'fill_ingredients'] if !opts[:'fill_ingredients'].nil?
      query_params[:'addRecipeInformation'] = opts[:'add_recipe_information'] if !opts[:'add_recipe_information'].nil?
      query_params[:'addRecipeNutrition'] = opts[:'add_recipe_nutrition'] if !opts[:'add_recipe_nutrition'].nil?
      query_params[:'author'] = opts[:'author'] if !opts[:'author'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'recipeBoxId'] = opts[:'recipe_box_id'] if !opts[:'recipe_box_id'].nil?
      query_params[:'titleMatch'] = opts[:'title_match'] if !opts[:'title_match'].nil?
      query_params[:'maxReadyTime'] = opts[:'max_ready_time'] if !opts[:'max_ready_time'].nil?
      query_params[:'ignorePantry'] = opts[:'ignore_pantry'] if !opts[:'ignore_pantry'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'minAlcohol'] = opts[:'min_alcohol'] if !opts[:'min_alcohol'].nil?
      query_params[:'maxAlcohol'] = opts[:'max_alcohol'] if !opts[:'max_alcohol'].nil?
      query_params[:'minCaffeine'] = opts[:'min_caffeine'] if !opts[:'min_caffeine'].nil?
      query_params[:'maxCaffeine'] = opts[:'max_caffeine'] if !opts[:'max_caffeine'].nil?
      query_params[:'minCopper'] = opts[:'min_copper'] if !opts[:'min_copper'].nil?
      query_params[:'maxCopper'] = opts[:'max_copper'] if !opts[:'max_copper'].nil?
      query_params[:'minCalcium'] = opts[:'min_calcium'] if !opts[:'min_calcium'].nil?
      query_params[:'maxCalcium'] = opts[:'max_calcium'] if !opts[:'max_calcium'].nil?
      query_params[:'minCholine'] = opts[:'min_choline'] if !opts[:'min_choline'].nil?
      query_params[:'maxCholine'] = opts[:'max_choline'] if !opts[:'max_choline'].nil?
      query_params[:'minCholesterol'] = opts[:'min_cholesterol'] if !opts[:'min_cholesterol'].nil?
      query_params[:'maxCholesterol'] = opts[:'max_cholesterol'] if !opts[:'max_cholesterol'].nil?
      query_params[:'minFluoride'] = opts[:'min_fluoride'] if !opts[:'min_fluoride'].nil?
      query_params[:'maxFluoride'] = opts[:'max_fluoride'] if !opts[:'max_fluoride'].nil?
      query_params[:'minSaturatedFat'] = opts[:'min_saturated_fat'] if !opts[:'min_saturated_fat'].nil?
      query_params[:'maxSaturatedFat'] = opts[:'max_saturated_fat'] if !opts[:'max_saturated_fat'].nil?
      query_params[:'minVitaminA'] = opts[:'min_vitamin_a'] if !opts[:'min_vitamin_a'].nil?
      query_params[:'maxVitaminA'] = opts[:'max_vitamin_a'] if !opts[:'max_vitamin_a'].nil?
      query_params[:'minVitaminC'] = opts[:'min_vitamin_c'] if !opts[:'min_vitamin_c'].nil?
      query_params[:'maxVitaminC'] = opts[:'max_vitamin_c'] if !opts[:'max_vitamin_c'].nil?
      query_params[:'minVitaminD'] = opts[:'min_vitamin_d'] if !opts[:'min_vitamin_d'].nil?
      query_params[:'maxVitaminD'] = opts[:'max_vitamin_d'] if !opts[:'max_vitamin_d'].nil?
      query_params[:'minVitaminE'] = opts[:'min_vitamin_e'] if !opts[:'min_vitamin_e'].nil?
      query_params[:'maxVitaminE'] = opts[:'max_vitamin_e'] if !opts[:'max_vitamin_e'].nil?
      query_params[:'minVitaminK'] = opts[:'min_vitamin_k'] if !opts[:'min_vitamin_k'].nil?
      query_params[:'maxVitaminK'] = opts[:'max_vitamin_k'] if !opts[:'max_vitamin_k'].nil?
      query_params[:'minVitaminB1'] = opts[:'min_vitamin_b1'] if !opts[:'min_vitamin_b1'].nil?
      query_params[:'maxVitaminB1'] = opts[:'max_vitamin_b1'] if !opts[:'max_vitamin_b1'].nil?
      query_params[:'minVitaminB2'] = opts[:'min_vitamin_b2'] if !opts[:'min_vitamin_b2'].nil?
      query_params[:'maxVitaminB2'] = opts[:'max_vitamin_b2'] if !opts[:'max_vitamin_b2'].nil?
      query_params[:'minVitaminB5'] = opts[:'min_vitamin_b5'] if !opts[:'min_vitamin_b5'].nil?
      query_params[:'maxVitaminB5'] = opts[:'max_vitamin_b5'] if !opts[:'max_vitamin_b5'].nil?
      query_params[:'minVitaminB3'] = opts[:'min_vitamin_b3'] if !opts[:'min_vitamin_b3'].nil?
      query_params[:'maxVitaminB3'] = opts[:'max_vitamin_b3'] if !opts[:'max_vitamin_b3'].nil?
      query_params[:'minVitaminB6'] = opts[:'min_vitamin_b6'] if !opts[:'min_vitamin_b6'].nil?
      query_params[:'maxVitaminB6'] = opts[:'max_vitamin_b6'] if !opts[:'max_vitamin_b6'].nil?
      query_params[:'minVitaminB12'] = opts[:'min_vitamin_b12'] if !opts[:'min_vitamin_b12'].nil?
      query_params[:'maxVitaminB12'] = opts[:'max_vitamin_b12'] if !opts[:'max_vitamin_b12'].nil?
      query_params[:'minFiber'] = opts[:'min_fiber'] if !opts[:'min_fiber'].nil?
      query_params[:'maxFiber'] = opts[:'max_fiber'] if !opts[:'max_fiber'].nil?
      query_params[:'minFolate'] = opts[:'min_folate'] if !opts[:'min_folate'].nil?
      query_params[:'maxFolate'] = opts[:'max_folate'] if !opts[:'max_folate'].nil?
      query_params[:'minFolicAcid'] = opts[:'min_folic_acid'] if !opts[:'min_folic_acid'].nil?
      query_params[:'maxFolicAcid'] = opts[:'max_folic_acid'] if !opts[:'max_folic_acid'].nil?
      query_params[:'minIodine'] = opts[:'min_iodine'] if !opts[:'min_iodine'].nil?
      query_params[:'maxIodine'] = opts[:'max_iodine'] if !opts[:'max_iodine'].nil?
      query_params[:'minIron'] = opts[:'min_iron'] if !opts[:'min_iron'].nil?
      query_params[:'maxIron'] = opts[:'max_iron'] if !opts[:'max_iron'].nil?
      query_params[:'minMagnesium'] = opts[:'min_magnesium'] if !opts[:'min_magnesium'].nil?
      query_params[:'maxMagnesium'] = opts[:'max_magnesium'] if !opts[:'max_magnesium'].nil?
      query_params[:'minManganese'] = opts[:'min_manganese'] if !opts[:'min_manganese'].nil?
      query_params[:'maxManganese'] = opts[:'max_manganese'] if !opts[:'max_manganese'].nil?
      query_params[:'minPhosphorus'] = opts[:'min_phosphorus'] if !opts[:'min_phosphorus'].nil?
      query_params[:'maxPhosphorus'] = opts[:'max_phosphorus'] if !opts[:'max_phosphorus'].nil?
      query_params[:'minPotassium'] = opts[:'min_potassium'] if !opts[:'min_potassium'].nil?
      query_params[:'maxPotassium'] = opts[:'max_potassium'] if !opts[:'max_potassium'].nil?
      query_params[:'minSelenium'] = opts[:'min_selenium'] if !opts[:'min_selenium'].nil?
      query_params[:'maxSelenium'] = opts[:'max_selenium'] if !opts[:'max_selenium'].nil?
      query_params[:'minSodium'] = opts[:'min_sodium'] if !opts[:'min_sodium'].nil?
      query_params[:'maxSodium'] = opts[:'max_sodium'] if !opts[:'max_sodium'].nil?
      query_params[:'minSugar'] = opts[:'min_sugar'] if !opts[:'min_sugar'].nil?
      query_params[:'maxSugar'] = opts[:'max_sugar'] if !opts[:'max_sugar'].nil?
      query_params[:'minZinc'] = opts[:'min_zinc'] if !opts[:'min_zinc'].nil?
      query_params[:'maxZinc'] = opts[:'max_zinc'] if !opts[:'max_zinc'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_recipes_complex\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Site Content
    # Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
    # @param query [String] The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def search_site_content(query, opts = {})
      data, _status_code, _headers = search_site_content_with_http_info(query, opts)
      data
    end

    # Search Site Content
    # Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
    # @param query [String] The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def search_site_content_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.search_site_content ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling DefaultApi.search_site_content"
      end
      # resource path
      local_var_path = '/food/site/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_site_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Summarize Recipe
    # Automatically generate a short description that summarizes key information about the recipe.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def summarize_recipe(id, opts = {})
      data, _status_code, _headers = summarize_recipe_with_http_info(id, opts)
      data
    end

    # Summarize Recipe
    # Automatically generate a short description that summarizes key information about the recipe.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def summarize_recipe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.summarize_recipe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.summarize_recipe"
      end
      # resource path
      local_var_path = '/recipes/{id}/summary'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#summarize_recipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Talk to Chatbot
    # This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
    # @param text [String] The request / question / answer from the user to the chatbot.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context_id An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
    # @return [Object]
    def talk_to_chatbot(text, opts = {})
      data, _status_code, _headers = talk_to_chatbot_with_http_info(text, opts)
      data
    end

    # Talk to Chatbot
    # This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
    # @param text [String] The request / question / answer from the user to the chatbot.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :context_id An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def talk_to_chatbot_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.talk_to_chatbot ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling DefaultApi.talk_to_chatbot"
      end
      # resource path
      local_var_path = '/food/converse'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text
      query_params[:'contextId'] = opts[:'context_id'] if !opts[:'context_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#talk_to_chatbot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Equipment
    # Visualize the equipment used to make a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_equipment(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_equipment_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Visualize Equipment
    # Visualize the equipment used to make a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_equipment_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_equipment ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.visualize_equipment"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.visualize_equipment"
      end
      # resource path
      local_var_path = '/recipes/visualizeEquipment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['view'] = opts[:'view'] if !opts[:'view'].nil?
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_equipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Ingredients
    # Visualize ingredients of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
    # @option opts [String] :view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_ingredients(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_ingredients_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Visualize Ingredients
    # Visualize ingredients of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
    # @option opts [String] :view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_ingredients_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_ingredients ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.visualize_ingredients"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.visualize_ingredients"
      end
      # resource path
      local_var_path = '/recipes/visualizeIngredients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['measure'] = opts[:'measure'] if !opts[:'measure'].nil?
      form_params['view'] = opts[:'view'] if !opts[:'view'].nil?
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_ingredients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Menu Item Nutrition by ID
    # Visualize a menu item's nutritional information as HTML including CSS.
    # @param id [Float] The menu item id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_menu_item_nutrition_by_id(id, opts = {})
      data, _status_code, _headers = visualize_menu_item_nutrition_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Menu Item Nutrition by ID
    # Visualize a menu item&#39;s nutritional information as HTML including CSS.
    # @param id [Float] The menu item id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_menu_item_nutrition_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_menu_item_nutrition_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_menu_item_nutrition_by_id"
      end
      # resource path
      local_var_path = '/food/menuItems/{id}/nutritionWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_menu_item_nutrition_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Price Breakdown
    # Visualize the price breakdown of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_price_breakdown(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_price_breakdown_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Visualize Price Breakdown
    # Visualize the price breakdown of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_price_breakdown_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_price_breakdown ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.visualize_price_breakdown"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.visualize_price_breakdown"
      end
      # resource path
      local_var_path = '/recipes/visualizePriceEstimator'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_price_breakdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Product Nutrition by ID
    # Visualize a product's nutritional information as HTML including CSS.
    # @param id [Float] The id of the product.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_product_nutrition_by_id(id, opts = {})
      data, _status_code, _headers = visualize_product_nutrition_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Product Nutrition by ID
    # Visualize a product&#39;s nutritional information as HTML including CSS.
    # @param id [Float] The id of the product.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_product_nutrition_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_product_nutrition_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_product_nutrition_by_id"
      end
      # resource path
      local_var_path = '/food/products/{id}/nutritionWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_product_nutrition_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Recipe Equipment by ID
    # Visualize a recipe's equipment list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_recipe_equipment_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_equipment_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Recipe Equipment by ID
    # Visualize a recipe&#39;s equipment list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_equipment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_recipe_equipment_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_recipe_equipment_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/equipmentWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_recipe_equipment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Recipe Ingredients by ID
    # Visualize a recipe's ingredient list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_recipe_ingredients_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_ingredients_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Recipe Ingredients by ID
    # Visualize a recipe&#39;s ingredient list.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_ingredients_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_recipe_ingredients_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_recipe_ingredients_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/ingredientWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_recipe_ingredients_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Recipe Nutrition
    # Visualize a recipe's nutritional information as HTML including CSS
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_recipe_nutrition(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_recipe_nutrition_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Visualize Recipe Nutrition
    # Visualize a recipe&#39;s nutritional information as HTML including CSS
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_nutrition_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_recipe_nutrition ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling DefaultApi.visualize_recipe_nutrition"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling DefaultApi.visualize_recipe_nutrition"
      end
      # resource path
      local_var_path = '/recipes/visualizeNutrition'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_recipe_nutrition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Recipe Nutrition by ID
    # Visualize a recipe's nutritional information as HTML including CSS.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_recipe_nutrition_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_nutrition_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Recipe Nutrition by ID
    # Visualize a recipe&#39;s nutritional information as HTML including CSS.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_nutrition_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_recipe_nutrition_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_recipe_nutrition_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_recipe_nutrition_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Visualize Recipe Price Breakdown by ID
    # Visualize a recipe's price breakdown.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [String]
    def visualize_recipe_price_breakdown_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_price_breakdown_by_id_with_http_info(id, opts)
      data
    end

    # Visualize Recipe Price Breakdown by ID
    # Visualize a recipe&#39;s price breakdown.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_price_breakdown_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.visualize_recipe_price_breakdown_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.visualize_recipe_price_breakdown_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/priceBreakdownWidget'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#visualize_recipe_price_breakdown_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
