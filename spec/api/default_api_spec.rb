=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.0
Contact: david@spoonacular.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DefaultApi)
    end
  end

  # unit tests for analyze_a_recipe_search_query
  # Analyze a Recipe Search Query
  # Parse a recipe search query to find out its intention.
  # @param q The recipe search query.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'analyze_a_recipe_search_query test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for analyze_recipe_instructions
  # Analyze Recipe Instructions
  # Extract ingredients and equipment from the recipe instruction steps.
  # @param instructions The instructions text.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'analyze_recipe_instructions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for autocomplete_ingredient_search
  # Autocomplete Ingredient Search
  # Autocomplete a search for an ingredient.
  # @param query The query - a partial or full ingredient name.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of results to return (between 1 and 100).
  # @option opts [Boolean] :meta_information Whether to return more meta information about the ingredients.
  # @option opts [Boolean] :intolerances A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances.
  # @return [Object]
  describe 'autocomplete_ingredient_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for autocomplete_menu_item_search
  # Autocomplete Menu Item Search
  # Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
  # @param query The (partial) search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of results to return (between 1 and 25).
  # @return [Object]
  describe 'autocomplete_menu_item_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for autocomplete_product_search
  # Autocomplete Product Search
  # Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
  # @param query The (partial) search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of results to return (between 1 and 25).
  # @return [Object]
  describe 'autocomplete_product_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for autocomplete_recipe_search
  # Autocomplete Recipe Search
  # Autocomplete a partial input to possible recipe names.
  # @param query The query to be autocompleted.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of results to return (between 1 and 25).
  # @return [Object]
  describe 'autocomplete_recipe_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classify_cuisine
  # Classify Cuisine
  # Classify the recipe&#39;s cuisine.
  # @param title The title of the recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'classify_cuisine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classify_grocery_product
  # Classify Grocery Product
  # Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
  # @param inline_object8 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale The locale of the returned category, supported is en_US and en_GB.
  # @return [Object]
  describe 'classify_grocery_product test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classify_grocery_product_bulk
  # Classify Grocery Product Bulk
  # Given a set of product jsons, get back classified products.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :locale The locale of the returned category, supported is en_US and en_GB.
  # @return [Object]
  describe 'classify_grocery_product_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_amounts
  # Convert Amounts
  # Convert amounts like \&quot;2 cups of flour to grams\&quot;.
  # @param ingredient_name The ingredient which you want to convert.
  # @param source_amount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
  # @param source_unit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
  # @param target_unit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'convert_amounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_recipe_card
  # Create Recipe Card
  # Create Recipe Card.
  # @param title The title of the recipe.
  # @param image The binary image of the recipe as jpg.
  # @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  # @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
  # @param ready_in_minutes The number of minutes it takes to get the recipe on the table.
  # @param servings The number of servings that you can make from the ingredients.
  # @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;).
  # @param background_image The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author The author of the recipe.
  # @option opts [String] :background_color The background color on the recipe card as a hex-string.
  # @option opts [String] :font_color The font color on the recipe card as a hex-string.
  # @option opts [String] :source The source of the recipe.
  # @return [Object]
  describe 'create_recipe_card test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for detect_food_in_text
  # Detect Food in Text
  # Detect ingredients and dishes in texts. This task is also called Named Entity Recognition (NER). In our case the entities are foods. Either dishes, such as pizza and cheeseburger or ingredients, such as cucumber and almonds.
  # @param text The text in which food items such as dish names and ingredients should be detected in.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'detect_food_in_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for extract_recipe_from_website
  # Extract Recipe from Website
  # Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
  # @param url The URL of the recipe page.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :force_extraction If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
  # @return [Object]
  describe 'extract_recipe_from_website test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_meal_plan
  # Generate Meal Plan
  # Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
  # @option opts [Float] :target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
  # @option opts [String] :diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
  # @option opts [String] :exclude A comma-separated list of allergens or ingredients that must be excluded.
  # @return [Object]
  describe 'generate_meal_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_random_food_joke
  # Get a Random Food Joke
  # Get a random joke that includes or is about food.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_a_random_food_joke test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_analyzed_recipe_instructions
  # Get Analyzed Recipe Instructions
  # Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and the equipment that is used.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
  # @return [Object]
  describe 'get_analyzed_recipe_instructions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_comparable_products
  # Get Comparable Products
  # Find comparable products to the given one.
  # @param upc The UPC of the product for that you want to find comparable products.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_comparable_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_conversation_suggests
  # Get Conversation Suggests
  # This endpoint returns suggestions for things the user can say or ask the chat bot.
  # @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of suggestions to return (between 1 and 25).
  # @return [Object]
  describe 'get_conversation_suggests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dish_pairing_for_wine
  # Get Dish Pairing for Wine
  # Get a dish that goes well with a given wine.
  # @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_dish_pairing_for_wine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_food_information
  # Get Food Information
  # Get information about a certain food (ingredient).
  # @param id The id of the food / ingredient.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :amount The amount of that food.
  # @option opts [String] :unit The unit for the given amount.
  # @return [Object]
  describe 'get_food_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ingredient_substitutes
  # Get Ingredient Substitutes
  # Search for substitutes for a given ingredient.
  # @param ingredient_name The name of the ingredient you want to replace.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_ingredient_substitutes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ingredient_substitutes_by_id
  # Get Ingredient Substitutes by ID
  # Search for substitutes for a given ingredient.
  # @param id The id of the ingredient you want substitutes for.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_ingredient_substitutes_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_menu_item_information
  # Get Menu Item Information
  # Get information about a certain menu item.
  # @param id The menu item id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_menu_item_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_product_information
  # Get Product Information
  # Get information about a packaged food product.
  # @param id The id of the packaged food product.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_product_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_random_food_trivia
  # Get Random Food Trivia
  # Returns random food trivia.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_random_food_trivia test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_random_recipes
  # Get Random Recipes
  # Find random (popular) recipes.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows for displaying with proper attribution.
  # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to.
  # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
  # @return [Object]
  describe 'get_random_recipes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_equipment_by_id
  # Get Recipe Equipment by ID
  # Get a recipe&#39;s equipment list.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_recipe_equipment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_information
  # Get Recipe Information
  # Get information about a recipe.
  # @param id The id of the recipe.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @return [Object]
  describe 'get_recipe_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_information_bulk
  # Get Recipe Information Bulk
  # Get information about multiple recipes at once. That is equivalent of calling the Get Recipe Information endpoint multiple times but is faster.
  # @param ids A comma-separated list of recipe ids.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_nutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @return [Object]
  describe 'get_recipe_information_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_ingredients_by_id
  # Get Recipe Ingredients by ID
  # Get a recipe&#39;s ingredient list.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_recipe_ingredients_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_nutrition_by_id
  # Get Recipe Nutrition by ID
  # Get a recipe&#39;s nutrition widget data.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_recipe_nutrition_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_recipe_price_breakdown_by_id
  # Get Recipe Price Breakdown by ID
  # Get a recipe&#39;s price breakdown data.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_recipe_price_breakdown_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_similar_recipes
  # Get Similar Recipes
  # Find recipes which are similar to the given one.
  # @param id The id of the source recipe to which similar recipes should be found.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The number of random recipes to be returned (between 1 and 100).
  # @return [Object]
  describe 'get_similar_recipes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_wine_description
  # Get Wine Description
  # Get the description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
  # @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'get_wine_description test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_wine_pairing
  # Get Wine Pairing
  # Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
  # @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
  # @return [Object]
  describe 'get_wine_pairing test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_wine_recommendation
  # Get Wine Recommendation
  # Get a specific wine recommendation (concrete product) for a given wine, e.g. \&quot;merlot\&quot;.
  # @param wine The name of the wine to get a specific product recommendation for.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
  # @option opts [Float] :min_rating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
  # @option opts [Float] :number The number of wine recommendations expected (between 1 and 100).
  # @return [Object]
  describe 'get_wine_recommendation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for guess_nutrition_by_dish_name
  # Guess Nutrition by Dish Name
  # Guess the macro nutrients of a dish given its title.
  # @param title The title of the dish.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'guess_nutrition_by_dish_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for map_ingredients_to_grocery_products
  # Map Ingredients to Grocery Products
  # Map a set of ingredients to products you can buy in the grocery store.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'map_ingredients_to_grocery_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for parse_ingredients
  # Parse Ingredients
  # Extract an ingredient from plain text.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings that you can make from the ingredients.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_nutrition Whether nutrition data should be added to correctly parsed ingredients.
  # @return [Object]
  describe 'parse_ingredients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for quick_answer
  # Quick Answer
  # Answer a nutrition related natural language question.
  # @param q The nutrition-related question.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'quick_answer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_food_videos
  # Search Food Videos
  # Find recipe and other food related videos.
  # @param query The search query.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type The type of the recipes. See a full list of supported meal types.
  # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
  # @option opts [String] :diet The diet to which the recipes must be compliant. See a full list of supported diets.
  # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be contained in the recipe.
  # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
  # @option opts [Float] :min_length Minimum video length in seconds.
  # @option opts [Float] :max_length Maximum video length in seconds.
  # @option opts [Float] :offset The number of results to skip (between 0 and 900).
  # @option opts [Float] :number The number of results to return (between 1 and 100).
  # @return [Object]
  describe 'search_food_videos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_grocery_products
  # Search Grocery Products
  # Search packaged food products such as frozen pizza and snickers bars.
  # @param query The search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :min_calories The minimum number of calories the product must have.
  # @option opts [Float] :max_calories The maximum number of calories the product can have.
  # @option opts [Float] :min_carbs The minimum number of carbohydrates in grams the product must have.
  # @option opts [Float] :max_carbs The maximum number of carbohydrates in grams the product can have.
  # @option opts [Float] :min_protein The minimum number of protein in grams the product must have.
  # @option opts [Float] :max_protein The maximum number of protein in grams the product can have.
  # @option opts [Float] :min_fat The minimum number of fat in grams the product must have.
  # @option opts [Float] :max_fat The maximum number of fat in grams the product can have.
  # @option opts [Float] :offset The offset number for paging (between 0 and 990).
  # @option opts [Float] :number The number of expected results (between 1 and 100).
  # @return [Object]
  describe 'search_grocery_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_grocery_products_by_upc
  # Search Grocery Products by UPC
  # Get information about a food product given its UPC.
  # @param upc The product&#39;s UPC.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'search_grocery_products_by_upc test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_menu_items
  # Search Menu Items
  # Search over 115,000 menu items from over 800 fast food and chain restaurants such as McDonalds Big Mac or Starbucks Mocha.
  # @param query The search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :min_calories The minimum number of calories the menu item must have.
  # @option opts [Float] :max_calories The maximum number of calories the menu item can have.
  # @option opts [Float] :min_carbs The minimum number of carbohydrates in grams the menu item must have.
  # @option opts [Float] :max_carbs The maximum number of carbohydrates in grams the menu item can have.
  # @option opts [Float] :min_protein The minimum number of protein in grams the menu item must have.
  # @option opts [Float] :max_protein The maximum number of protein in grams the menu item can have.
  # @option opts [Float] :min_fat The minimum number of fat in grams the menu item must have.
  # @option opts [Float] :max_fat The maximum number of fat in grams the menu item can have.
  # @option opts [Float] :offset The offset number for paging (between 0 and 990).
  # @option opts [Float] :number The number of expected results (between 1 and 10).
  # @return [Object]
  describe 'search_menu_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_recipes
  # Search Recipes
  # Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \&quot;Search Recipes Complex\&quot; endpoint for much more flexibility.
  # @param query The (natural language) recipe search query.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
  # @option opts [String] :diet The diet to which the recipes must be compliant. See a full list of supported diets.
  # @option opts [String] :exclude_ingredients An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
  # @option opts [String] :intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
  # @option opts [Float] :offset The number of results to skip (between 0 and 900).
  # @option opts [Float] :number The number of results to return (between 1 and 100).
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows for displaying with proper attribution.
  # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
  # @return [Object]
  describe 'search_recipes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_recipes_by_ingredients
  # Search Recipes by Ingredients
  # Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a \&quot;what&#39;s in your fridge\&quot; API endpoint.
  # @param ingredients A comma-separated list of ingredients that the recipes should contain.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :number The maximal number of recipes to return (between 1 and 100). Defaults to 10.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows for displaying with proper attribution.
  # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
  # @option opts [Boolean] :ignore_pantry Whether to ignore pantry ingredients such as water, salt, flour etc.
  # @return [Object]
  describe 'search_recipes_by_ingredients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_recipes_by_nutrients
  # Search Recipes by Nutrients
  # Find a set of recipes that adhere to the given nutritional limits. All the returned recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :min_carbs The minimum number of carbohydrates in grams the recipe must have.
  # @option opts [Float] :max_carbs The maximum number of carbohydrates in grams the recipe can have.
  # @option opts [Float] :min_protein The minimum number of protein in grams the recipe must have.
  # @option opts [Float] :max_protein The maximum number of protein in grams the recipe can have.
  # @option opts [Float] :min_calories The minimum number of calories the recipe must have.
  # @option opts [Float] :max_calories The maximum number of calories the recipe can have.
  # @option opts [Float] :min_fat The minimum number of fat in grams the recipe must have.
  # @option opts [Float] :max_fat The maximum number of fat in grams the recipe can have.
  # @option opts [Float] :min_alcohol The minimum number of alcohol in grams the recipe must have.
  # @option opts [Float] :max_alcohol The maximum number of alcohol in grams the recipe must have.
  # @option opts [Float] :min_caffeine The minimum number of milligrams of caffeine the recipe must have.
  # @option opts [Float] :max_caffeine The maximum number of alcohol in grams the recipe must have.
  # @option opts [Float] :min_copper The minimum number of copper in milligrams the recipe must have.
  # @option opts [Float] :max_copper The maximum number of copper in milligrams the recipe must have.
  # @option opts [Float] :min_calcium The minimum number of calcium in milligrams the recipe must have.
  # @option opts [Float] :max_calcium The maximum number of calcium in milligrams the recipe must have.
  # @option opts [Float] :min_choline The minimum number of choline in milligrams the recipe must have.
  # @option opts [Float] :max_choline The maximum number of choline in milligrams the recipe can have.
  # @option opts [Float] :min_cholesterol The minimum number of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :max_cholesterol The maximum number of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :min_fluoride The minimum number of fluoride in milligrams the recipe must have.
  # @option opts [Float] :max_fluoride The maximum number of fluoride in milligrams the recipe can have.
  # @option opts [Float] :min_saturated_fat The minimum number of saturated fat in grams the recipe must have.
  # @option opts [Float] :max_saturated_fat The maximum number of saturated fat in grams the recipe must have.
  # @option opts [Float] :min_vitamin_a The minimum number of Vitamin A in IU the recipe must have.
  # @option opts [Float] :max_vitamin_a The maximum number of Vitamin A in IU the recipe must have.
  # @option opts [Float] :min_vitamin_c The minimum number of Vitamin C milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_c The maximum number of Vitamin C in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_d The minimum number of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_d The maximum number of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :min_vitamin_e The minimum number of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_e The maximum number of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_k The minimum number of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_k The maximum number of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :min_vitamin_b1 The minimum number of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b1 The maximum number of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_b2 The minimum number of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b2 The maximum number of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_b5 The minimum number of Vitamin B5 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b5 The maximum number of Vitamin B5 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b3 The minimum number of Vitamin B3 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b3 The maximum number of Vitamin B3 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b6 The minimum number of Vitamin B6 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b6 The maximum number of Vitamin B6 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b12 The minimum number of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_b12 The maximum number of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :min_fiber The minimum number of fiber in grams the recipe must have.
  # @option opts [Float] :max_fiber The maximum number of fiber in grams the recipe must have.
  # @option opts [Float] :min_folate The minimum number of folate in grams the recipe must have.
  # @option opts [Float] :max_folate The maximum number of folate in grams the recipe must have.
  # @option opts [Float] :min_folic_acid The minimum number of folic acid in grams the recipe must have.
  # @option opts [Float] :max_folic_acid The maximum number of folic acid in grams the recipe must have.
  # @option opts [Float] :min_iodine The minimum number of Iodine in grams the recipe must have.
  # @option opts [Float] :max_iodine The maximum number of iodine in grams the recipe must have.
  # @option opts [Float] :min_iron The minimum number of iron in milligrams the recipe must have.
  # @option opts [Float] :max_iron The maximum number of iron in milligrams the recipe can have.
  # @option opts [Float] :min_magnesium The minimum number of magnesium in milligrams the recipe must have.
  # @option opts [Float] :max_magnesium The maximum number of magnesium in milligrams the recipe can have.
  # @option opts [Float] :min_manganese The minimum number of manganese in milligrams the recipe must have.
  # @option opts [Float] :max_manganese The maximum number of manganese in milligrams the recipe can have.
  # @option opts [Float] :min_phosphorus The minimum number of phosphorus in milligrams the recipe must have.
  # @option opts [Float] :max_phosphorus The maximum number of phosphorus in milligrams the recipe can have.
  # @option opts [Float] :min_potassium The minimum number of potassium in milligrams the recipe must have.
  # @option opts [Float] :max_potassium The maximum number of potassium in milligrams the recipe can have.
  # @option opts [Float] :min_selenium The minimum number of selenium in grams the recipe must have.
  # @option opts [Float] :max_selenium The maximum number of selenium in grams the recipe must have.
  # @option opts [Float] :min_sodium The minimum number of sodium in milligrams the recipe must have.
  # @option opts [Float] :max_sodium The maximum number of sodium in milligrams the recipe must have.
  # @option opts [Float] :min_sugar The minimum number of sugar in grams the recipe must have.
  # @option opts [Float] :max_sugar The maximum number of sugar in grams the recipe must have.
  # @option opts [Float] :min_zinc The minimum number of zinc in milligrams the recipe must have.
  # @option opts [Float] :max_zinc The maximum number of zinc in milligrams the recipe can have.
  # @option opts [Float] :offset The offset number for paging (between 0 and 990).
  # @option opts [Float] :number The number of expected results (between 1 and 100).
  # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows for displaying with proper attribution.
  # @return [Object]
  describe 'search_recipes_by_nutrients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_recipes_complex
  # Search Recipes Complex
  # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: Since this method combines searching by query, by ingredients, and by nutrients in one endpoint.
  # @param query The (natural language) recipe search query.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as &#39;OR&#39;). See a full list of supported cuisines.
  # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as &#39;AND&#39;). See a full list of supported cuisines.
  # @option opts [String] :diet The diet to which the recipes must be compliant. See a full list of supported diets.
  # @option opts [String] :intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
  # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
  # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be contained in the recipe.
  # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
  # @option opts [String] :type The type of the recipes. See a full list of supported meal types.
  # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
  # @option opts [Boolean] :fill_ingredients Add information about the used and missing ingredients in each recipe.
  # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned. This saves the calls to get recipe information.
  # @option opts [String] :author The username of the recipe author.
  # @option opts [String] :tags User defined tags that have to match.
  # @option opts [String] :title_match A text that has to match in the title of the recipes.
  # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
  # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
  # @option opts [Float] :min_carbs The minimum number of carbohydrates in grams the recipe must have.
  # @option opts [Float] :max_carbs The maximum number of carbohydrates in grams the recipe can have.
  # @option opts [Float] :min_protein The minimum number of protein in grams the recipe must have.
  # @option opts [Float] :max_protein The maximum number of protein in grams the recipe can have.
  # @option opts [Float] :min_calories The minimum number of calories the recipe must have.
  # @option opts [Float] :max_calories The maximum number of calories the recipe can have.
  # @option opts [Float] :min_fat The minimum number of fat in grams the recipe must have.
  # @option opts [Float] :max_fat The maximum number of fat in grams the recipe can have.
  # @option opts [Float] :min_alcohol The minimum number of alcohol in grams the recipe must have.
  # @option opts [Float] :max_alcohol The maximum number of alcohol in grams the recipe must have.
  # @option opts [Float] :min_caffeine The minimum number of milligrams of caffeine the recipe must have.
  # @option opts [Float] :max_caffeine The maximum number of alcohol in grams the recipe must have.
  # @option opts [Float] :min_copper The minimum number of copper in milligrams the recipe must have.
  # @option opts [Float] :max_copper The maximum number of copper in milligrams the recipe must have.
  # @option opts [Float] :min_calcium The minimum number of calcium in milligrams the recipe must have.
  # @option opts [Float] :max_calcium The maximum number of calcium in milligrams the recipe must have.
  # @option opts [Float] :min_choline The minimum number of choline in milligrams the recipe must have.
  # @option opts [Float] :max_choline The maximum number of choline in milligrams the recipe can have.
  # @option opts [Float] :min_cholesterol The minimum number of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :max_cholesterol The maximum number of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :min_fluoride The minimum number of fluoride in milligrams the recipe must have.
  # @option opts [Float] :max_fluoride The maximum number of fluoride in milligrams the recipe can have.
  # @option opts [Float] :min_saturated_fat The minimum number of saturated fat in grams the recipe must have.
  # @option opts [Float] :max_saturated_fat The maximum number of saturated fat in grams the recipe must have.
  # @option opts [Float] :min_vitamin_a The minimum number of Vitamin A in IU the recipe must have.
  # @option opts [Float] :max_vitamin_a The maximum number of Vitamin A in IU the recipe must have.
  # @option opts [Float] :min_vitamin_c The minimum number of Vitamin C milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_c The maximum number of Vitamin C in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_d The minimum number of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_d The maximum number of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :min_vitamin_e The minimum number of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_e The maximum number of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_k The minimum number of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_k The maximum number of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :min_vitamin_b1 The minimum number of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b1 The maximum number of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_b2 The minimum number of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b2 The maximum number of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :min_vitamin_b5 The minimum number of Vitamin B5 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b5 The maximum number of Vitamin B5 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b3 The minimum number of Vitamin B3 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b3 The maximum number of Vitamin B3 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b6 The minimum number of Vitamin B6 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b6 The maximum number of Vitamin B6 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b12 The minimum number of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_b12 The maximum number of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :min_fiber The minimum number of fiber in grams the recipe must have.
  # @option opts [Float] :max_fiber The maximum number of fiber in grams the recipe must have.
  # @option opts [Float] :min_folate The minimum number of folate in grams the recipe must have.
  # @option opts [Float] :max_folate The maximum number of folate in grams the recipe must have.
  # @option opts [Float] :min_folic_acid The minimum number of folic acid in grams the recipe must have.
  # @option opts [Float] :max_folic_acid The maximum number of folic acid in grams the recipe must have.
  # @option opts [Float] :min_iodine The minimum number of Iodine in grams the recipe must have.
  # @option opts [Float] :max_iodine The maximum number of iodine in grams the recipe must have.
  # @option opts [Float] :min_iron The minimum number of iron in milligrams the recipe must have.
  # @option opts [Float] :max_iron The maximum number of iron in milligrams the recipe can have.
  # @option opts [Float] :min_magnesium The minimum number of magnesium in milligrams the recipe must have.
  # @option opts [Float] :max_magnesium The maximum number of magnesium in milligrams the recipe can have.
  # @option opts [Float] :min_manganese The minimum number of manganese in milligrams the recipe must have.
  # @option opts [Float] :max_manganese The maximum number of manganese in milligrams the recipe can have.
  # @option opts [Float] :min_phosphorus The minimum number of phosphorus in milligrams the recipe must have.
  # @option opts [Float] :max_phosphorus The maximum number of phosphorus in milligrams the recipe can have.
  # @option opts [Float] :min_potassium The minimum number of potassium in milligrams the recipe must have.
  # @option opts [Float] :max_potassium The maximum number of potassium in milligrams the recipe can have.
  # @option opts [Float] :min_selenium The minimum number of selenium in grams the recipe must have.
  # @option opts [Float] :max_selenium The maximum number of selenium in grams the recipe must have.
  # @option opts [Float] :min_sodium The minimum number of sodium in milligrams the recipe must have.
  # @option opts [Float] :max_sodium The maximum number of sodium in milligrams the recipe must have.
  # @option opts [Float] :min_sugar The minimum number of sugar in grams the recipe must have.
  # @option opts [Float] :max_sugar The maximum number of sugar in grams the recipe must have.
  # @option opts [Float] :min_zinc The minimum number of zinc in milligrams the recipe must have.
  # @option opts [Float] :max_zinc The maximum number of zinc in milligrams the recipe can have.
  # @option opts [Float] :offset The offset number for paging (between 0 and 990).
  # @option opts [Float] :number The number of expected results (between 1 and 10).
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows for displaying with proper attribution.
  # @return [Object]
  describe 'search_recipes_complex test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_site_content
  # Search Site Content
  # Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggests on spoonacular.com. This is a suggest API so you can send partial strings as queries.
  # @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'search_site_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for summarize_recipe
  # Summarize Recipe
  # Summarize the recipe in a short text.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'summarize_recipe test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for talk_to_chatbot
  # Talk to Chatbot
  # This endpoint can be used to have a conversation about food with the spoonacular chat bot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
  # @param text The request / question / answer from the user to the chat bot.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :context_id An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
  # @return [Object]
  describe 'talk_to_chatbot test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_equipment
  # Visualize Equipment
  # Visualize the equipment used to make a recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_equipment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_ingredients
  # Visualize Ingredients
  # Visualize ingredients of a recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :measure The initial measure, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;.
  # @option opts [String] :view Either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot; as visualization of the equipment.
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_ingredients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_menu_item_nutrition_by_id
  # Visualize Menu Item Nutrition by ID
  # Visualize a menu items&#39; nutrition data.
  # @param id The menu item id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_menu_item_nutrition_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_price_breakdown
  # Visualize Price Breakdown
  # Visualize the price breakdown of a recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_price_breakdown test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_product_nutrition_by_id
  # Visualize Product Nutrition by ID
  # Visualize a grocery product&#39;s nutritional information.
  # @param id The id of the product.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_product_nutrition_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_recipe_equipment_by_id
  # Visualize Recipe Equipment by ID
  # Visualize a recipe&#39;s equipment list.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_equipment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_recipe_ingredients_by_id
  # Visualize Recipe Ingredients by ID
  # Visualize a recipe&#39;s ingredient list.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_ingredients_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_recipe_nutrition
  # Visualize Recipe Nutrition
  # Visualize a recipe&#39;s nutrition data.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_recipe_nutrition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_recipe_nutrition_by_id
  # Visualize Recipe Nutrition by ID
  # Visualize a recipe&#39;s nutritional information.
  # @param id The id of the product.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_nutrition_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for visualize_recipe_price_breakdown_by_id
  # Visualize Recipe Price Breakdown by ID
  # Visualize a recipe&#39;s price breakdown.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_price_breakdown_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
